- hosts: localhost
  gather_facts: true
  tasks:
  - name: setup_bastion_host | Check OCP Ansible Playbooks exist
    stat: path=/usr/share/ansible/openshift-ansible
    register: check_ocp_playbooks
  - name: setup_bastion_host | Register host and subscribe
    redhat_subscription:
      state: present
      username: "{{rhn_user}}"
      password: "{{rhn_password}}"
      pool: "{{rhn_pool_id}}"
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_bastion_host | Disable all repos
    shell: subscription-manager repos --disable="*"
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_bastion_host | Enable OCP and RHSCL repos (needed for Fedora)
    shell: subscription-manager repos --enable="rhel-7-server-rpms" --enable="rhel-7-server-extras-rpms" --enable="rhel-7-server-ose-3.6-rpms" --enable="rhel-7-fast-datapath-rpms" --enable="rhel-server-rhscl-7-rpms" --enable="rh-gluster-3-for-rhel-7-server-rpms"
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_bastion_host | Install EPEL repos
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      state: present
  - name: setup_bastion_host | Install deltarpm
    yum:
      name: deltarpm
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_bastion_host | Install rpms
    yum:
      name="{{ item }}"
      state=installed
    with_items:
    - ftp
    - wget
    - git
    - net-tools
    - bind-utils
    - iptables-services
    - bridge-utils
    - bash-completion
    - kexec-tools
    - sos
    - psacct
    - python-virtualenv
    - gcc
    - atomic-openshift-utils
    - atomic-openshift-excluder
    - atomic-openshift-clients
    - atomic-openshift
    - rh-python35
    - cns-deploy
    - heketi-client
    - curlftpfs
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_bastion_host | Disable GlusterFS repo
    shell: subscription-manager repos --disable="rh-gluster-3-for-rhel-7-server-rpms"
    when: check_ocp_playbooks.stat.exists == false
  - name: setup_ssh | Generate SSH keys
    shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
    args:
      creates: /root/.ssh/id_rsa.*
  - name: configure_hosts | Configure /etc/hosts
    lineinfile: dest=/etc/hosts line="{{ hostvars[item]['ansible_host'] }} {{ hostvars[item]['inventory_hostname'] }}"
    with_items: "{{groups.all}}"
  - name: configure_docker | Start Docker
    systemd:
      name: docker
      state: started
- hosts: masters:nodes
  gather_facts: true
  vars: 
    net_interfaces: [ 'enp1s0' ]
  tasks:
  - name: setup_ssh | Set password
    set_fact:
      ansible_ssh_pass: "{{ansible_ssh_pass}}"
  - name: setup_ssh | Copy SSH keys
    authorized_key: user=root key={{lookup('file', item)}} manage_dir=no
    with_fileglob: ~/.ssh/id_rsa.pub
  - name: configure_network_if | Configure Network interfaces
    template: owner=root group=root mode=644 
              src=ocplabs-ifcfg-interface-template 
              dest="/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    with_items: "{{ net_interfaces }}"
  - name: check_ostree | Check if system is Atomic Host
    stat: path=/etc/ostree
    register: check_ostree
  - name: check_parted | Check if system has parted installed
    stat: path=/usr/sbin/parted
    register: check_parted
  - name: setup_nodes | Register host and subscribe
    redhat_subscription:
      state: present
      username: "{{rhn_user}}"
      password: "{{rhn_password}}"
      pool: "{{rhn_pool_id}}"
    when: check_ostree.stat.exists == false or check_parted.stat.exists == false
  - name: setup_nodes | Disable all repos
    shell: subscription-manager repos --disable="*"
    when: check_ostree.stat.exists == false or check_parted.stat.exists == false 
  - name: setup_nodes | Enable OCP and RHSCL repos (needed for Fedora)
    shell: subscription-manager repos --enable="rhel-7-server-rpms" --enable="rhel-7-server-extras-rpms" --enable="rhel-7-server-ose-3.6-rpms" --enable="rhel-7-fast-datapath-rpms" --enable="rhel-server-rhscl-7-rpms" --enable="rh-gluster-3-for-rhel-7-server-rpms"
    when: check_ostree.stat.exists == false or check_parted.stat.exists == false
  - name: setup_nodes| Install deltarpm
    yum:
      name: deltarpm
    when: check_ostree.stat.exists == false
  - name: setup_nodes | Install rpms
    yum:
      name="{{ item }}"
      state=installed
    with_items:
    - wget
    - git
    - net-tools
    - bind-utils
    - iptables-services
    - bridge-utils
    - bash-completion
    - kexec-tools
    - sos
    - psacct
    - python-virtualenv
    - gcc
    - atomic-openshift-utils
    - atomic-openshift-excluder
    - atomic-openshift-clients
    - atomic-openshift
    - rh-python35
    - cns-deploy
    - heketi-client
    when: check_ostree.stat.exists == false
  - name: setup_nodes | Install parted
    shell: atomic host install {{ item }}
    with_items:
    - parted
    ignore_errors: yes
    when: check_ostree.stat.exists == true and check_parted.stat.exists == false
  - name: setup_nodes | Upgrade Atomic Host
    shell: atomic host upgrade
    when: check_ostree.stat.exists == true and check_parted.stat.exists == false
  - name: setup_nodes | Disable GlusterFS repo
    shell: subscription-manager repos --disable="rh-gluster-3-for-rhel-7-server-rpms"
    when: check_ostree.stat.exists == false
  - name: configure_hosts | Configure /etc/hosts
    lineinfile: dest=/etc/hosts line="{{ hostvars[item]['ansible_host'] }} {{ hostvars[item]['inventory_hostname'] }}"
    with_items: "{{groups.all}}"
  - name: configure_docker_storage | Setup Docker partition
    parted:
      device: /dev/sda
      number: 4
      label: gpt
      flags: [ lvm ]
      state: present
      part_start: "{{ ((ansible_devices.sda.partitions.sda3.start | int )  + (ansible_devices.sda.partitions.sda3.sectors | int )) | round | int }}s"
      part_end: 100%
  - name: configure_docker_storage | Setup Docker volume group
    lvg:
      pvs: /dev/sda4
      vg: docker-vg
      state: present
    register: docker_vg
  - name: configure_docker_storage | Stop Docker
    systemd:
      name: docker
      state: stopped
    when: docker_vg.changed
  - name: configure_docker_storage | Remove previous Docker lib directory
    file:
      path: /var/lib/docker
      state: absent
    when: docker_vg.changed
  - name: configure_docker_storage | Configure Docker storage (set volume group)
    lineinfile: dest=/etc/sysconfig/docker-storage-setup line="VG=docker-vg"
  - name: configure_docker_storage | Configure Docker storage (set lvm thin pool)
    lineinfile: dest=/etc/sysconfig/docker-storage-setup line="SETUP_LVM_THIN_POOL=yes"
  - name: configure_docker_storage | Configure Docker storage (remove container thinpool)
    lineinfile: dest=/etc/sysconfig/docker-storage-setup regexp="CONTAINER_THINPOOL=.*" state=absent
  - name: configure_docker_storage | Configure Docker storage (remove DOCKER_STORAGE_OPTIONS)
    lineinfile: dest=/etc/sysconfig/docker-storage regexp="DOCKER_STORAGE_OPTIONS=.*" state=absent
  - name: configure_docker_storage | Delete previous Docker storage volume
    lvol:
      vg: docker-vg
      lv: docker-pool
      state: absent
      force: yes
    when: docker_vg.changed
  - name: configure_docker_storage | Setup Docker storage
    shell: docker-storage-setup
    when: docker_vg.changed
  - name: configure_docker_storage | Extend Docker storage volume
    lvol:
      vg: docker-vg
      lv: docker-pool
      size: +100%FREE
    when: docker_vg.changed
  - name: configure_docker | Configure Docker
    lineinfile: dest=/etc/sysconfig/docker
                regexp="^OPTIONS=.*"
                line="OPTIONS='--signature-verification=false --selinux-enabled  --log-driver=journald --insecure-registry 172.30.0.0/16'"
                state=present
    when: docker_vg.changed
  - name: configure_docker | Start Docker
    systemd:
      name: docker
      state: started
    when: docker_vg.changed
  - name: setup_cockpit | Setup Cockpit Service
    copy:
      src: cockpitws.service
      dest: /etc/systemd/system/cockpitws.service
      owner: root
      group: root
      mode: 0640
    when: check_ostree.stat.exists == true
  - name: setup_cockpit | Setup Cockpit Container
    shell: atomic install cockpit/ws
    when: check_ostree.stat.exists == true
  - name: setup_cockpit | Start Cockpit Service
    systemd:
      name: cockpitws.service
      enabled: yes
      daemon_reload: yes
      state: started
    when: check_ostree.stat.exists == true
  - name: setup_cockpit | Setup firewall for Cockpit
    iptables:
      chain: OS_FIREWALL_ALLOW 
      protocol: tcp
      destination_port: 9090
      jump: ACCEPT
    when: check_ostree.stat.exists == true
- hosts: masters
  tasks:
  - name: check_ostree | Check if system is Atomic Host
    stat: path=/etc/ostree
    register: check_ostree
  - name: docker_check_node_images | Check Docker Images for Masters
    shell: docker images '{{ocp_docker_registry}}/openshift3/{{item}}' | grep -e {{ocp_docker_registry}}/openshift3/{{item}} | awk '{}END{ if (!NR) print "{{item}}"}'
    register: docker_images_missing
    with_items:
    - ose:v3.6
    - node:v3.6
    - openvswitch:v3.6
    - ose-deployer:v3.6
    - ose-docker-registry:v3.6
    - ose-haproxy-router:v3.6
    - ose-pod:v3.6
    - registry-console:v3.6
  - name: docker_pull_master | Pull Docker Images for Masters
    shell: docker pull {{ocp_docker_registry}}/openshift3/{{item}}
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'false' and docker_images_missing.results is defined"
  - name: docker_offline_download_images | Download Docker Images for offline install
    shell: curl -s -L -k --retry 3 --retry-delay 5 {{offline_repo}}/openshift3/{{item.split(':')[0]}}_{{item.split(':')[1]}}.tar | docker load
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'true' and docker_images_missing.results is defined"
- hosts: nodes
  tasks:
  - name: check_ostree | Check if system is Atomic Host
    stat: path=/etc/ostree
    register: check_ostree
  - name: docker_check_node_images | Check Docker Images for Nodes
    shell: docker images '{{ocp_docker_registry}}/openshift3/{{item}}' | grep -e {{ocp_docker_registry}}/openshift3/{{item}} | awk '{}END{ if (!NR) print "{{item}}"}'
    register: docker_images_missing
    with_items:
    - node:v3.6
    - openvswitch:v3.6
    - ose-deployer:v3.6
    - ose-docker-registry:v3.6
    - ose-haproxy-router:v3.6
    - ose-pod:v3.6
    - registry-console:v3.6
  - name: docker_pull_nodes | Pull Docker Images for Nodes
    shell: docker pull {{ocp_docker_registry}}/openshift3/{{item}}
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'false' and docker_images_missing.results is defined"
  - name: docker_offline_download_images | Download Docker Images for offline install
    shell: curl -s -L -k --retry 3 --retry-delay 5 {{offline_repo}}/openshift3/{{item.split(':')[0]}}_{{item.split(':')[1]}}.tar | docker load
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'true' and docker_images_missing.results is defined"
- hosts: glusterfs
  tasks:
  - name: check_ostree | Check if system is Atomic Host
    stat: path=/etc/ostree
    register: check_ostree
  - name: docker_check_node_images | Check Docker Images for Gluster
    shell: docker images '{{ocp_docker_registry}}/rhgs3/{{item}}' | grep -e {{ocp_docker_registry}}/rhgs3/{{item}} | awk '{}END{ if (!NR) print "{{item}}"}'
    register: docker_images_missing
    with_items:
    - rhgs-server-rhel7:3.3.0
    - rhgs-volmanager-rhel7:3.0.0
  - name: docker_pull_nodes | Pull Docker Images for Gluster
    shell: docker pull {{ocp_docker_registry}}/rhgs3/{{item}}
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'false' and docker_images_missing.results is defined"
  - name: docker_offline_download_images | Download Docker Images for Gluster offline install
    shell: curl -s -L -k --retry 3 --retry-delay 5 {{offline_repo}}/rhgs3/{{item.split(':')[0]}}_{{item.split(':')[1]}}.tar | docker load
    with_items: "{{ docker_images_missing.results|map(attribute='stdout_lines')|list }}"
    when: "check_ostree.stat.exists and offline == 'true' and docker_images_missing.results is defined"
  - name: kernel_modules | Ensure that kernel modules are installed (https://access.redhat.com/documentation/en-us/red_hat_gluster_storage/3.3/html-single/container-native_storage_for_openshift_container_platform/#idm139750772891936)
    shell: modprobe {{item}}
    with_items:
    - dm_thin_pool
    - dm_multipath
    - target_core_user
  - name: kernel_modules | Create conf files for modules
    file:
      path: /etc/modules-load.d/{{ item }}.conf
      state: touch
      mode: "u=rw,g=r,o=r"
    with_items:
    - dm_thin_pool
    - dm_multipath
    - target_core_user
  - name: kernel_modules | Add modules to conf file
    lineinfile: dest=/etc/modules-load.d/{{ item }}.conf line="{{ item }}"
    with_items:
    - dm_thin_pool
    - dm_multipath
    - target_core_user
  - name: raw_device | Remove partition table
    shell: dd if=/dev/zero of=/dev/sdb bs=512 count=1 conv=notrunc
